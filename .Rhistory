#columns were not in order (left and right were not necessarily beside each other); fixed using sort
distances[, 2:45] <- distances[ , order(names(distances[, 2:45]))]
str(distances) #look at; manually sorting it is; I commented this out using "#"; you can remove this
#distances_sorted <- distances[ , c(1:20, 22, 21, 23, 24, 27, 25, 28, 26, 43, 29, 32, 30, 33, 31, 34, 35, 39, 36, 40, 37, 41, 38, 42, 44, 45)] #here I am sorting manually; this could be rearranged in excel as well before starting
#str(distances_sorted) #look at; it looks good now
numcolmax <- length(t1_minus_t2[1, ]) #original number of columns
distances <- as.data.frame(t1_minus_t2[ , c(1, seq(5, numcolmax, by = 4))]) #extracting, turning into dataframe
str(distances) #look at; I commented this out using "#"; you can remove this
#columns were not in order (left and right were not necessarily beside each other); fixed using sort
distances[, 2:45] <- distances[ , order(names(distances[, 2:45]))]
str(distances) #look at; manually sorting it is; I commented this out using "#"; you can remove this
distances_sorted <- distances[ , c(1:20, 22, 21, 23, 24, 27, 25, 28, 26, 43, 29, 32, 30, 33, 31, 34, 35, 39, 36, 40, 37, 41, 38, 42, 44, 45)] #here I am sorting manually; this could be rearranged in excel as well before starting
#str(distances_sorted) #look at; it looks good now
numcolmax <- length(t1_minus_t2[1, ]) #original number of columns
distances <- as.data.frame(t1_minus_t2[ , c(1, seq(5, numcolmax, by = 4))]) #extracting, turning into dataframe
#str(distances) #look at; I commented this out using "#"; you can remove this
#columns were not in order (left and right were not necessarily beside each other); fixed using sort
distances <- distances[ , c(1,order(names(distances[, 2:45])))]
str(distances) #look at; manually sorting it is; I commented this out using "#"; you can remove this
#distances_sorted <- distances[ , c(1:20, 22, 21, 23, 24, 27, 25, 28, 26, 43, 29, 32, 30, 33, 31, 34, 35, 39, 36, 40, 37, 41, 38, 42, 44, 45)] #here I am sorting manually; this could be rearranged in excel as well before starting
#str(distances_sorted) #look at; it looks good now
numcolmax <- length(t1_minus_t2[1, ]) #original number of columns
distances <- as.data.frame(t1_minus_t2[ , c(1, seq(5, numcolmax, by = 4))]) #extracting, turning into dataframe
#str(distances) #look at; I commented this out using "#"; you can remove this
#columns were not in order (left and right were not necessarily beside each other); fixed using sort
distances <- distances[ , c(1, order(names(distances[, 2:45])) + 1)]
str(distances) #look at; manually sorting it is; I commented this out using "#"; you can remove this
#distances_sorted <- distances[ , c(1:20, 22, 21, 23, 24, 27, 25, 28, 26, 43, 29, 32, 30, 33, 31, 34, 35, 39, 36, 40, 37, 41, 38, 42, 44, 45)] #here I am sorting manually; this could be rearranged in excel as well before starting
#str(distances_sorted) #look at; it looks good now
numcolmax <- length(t1_minus_t2[1, ]) #original number of columns
distances <- as.data.frame(t1_minus_t2[ , c(1, seq(5, numcolmax, by = 4))]) #extracting, turning into dataframe
#str(distances) #look at; I commented this out using "#"; you can remove this
#columns were not in order (left and right were not necessarily beside each other); fixed using sort
distances <- distances[ , c(1, order(names(distances[, 2:45])) + 1)] #sorting, not including the first column
str(distances) #look at; manually sorting it is; I commented this out using "#"; you can remove this
distances_sorted <- distances[ , c(1:20, 22, 21, 23, 24, 27, 25, 28, 26, 43, 29, 32, 30, 33, 31, 34, 35, 39, 36, 40, 37, 41, 38, 42, 44, 45)] #here I am sorting manually; this could be rearranged in excel as well before starting
str(distances_sorted) #look at; it looks good now
numcolmax <- length(t1_minus_t2[1, ]) #original number of columns
distances <- as.data.frame(t1_minus_t2[ , c(1, seq(5, numcolmax, by = 4))]) #extracting, turning into dataframe
#str(distances) #look at; I commented this out using "#"; you can remove this
#columns were not in order (left and right were not necessarily beside each other); fixed using sort
distances <- distances[ , c(1, order(names(distances[, 2:45])) + 1)] #sorting, not including the first column
#str(distances) #look at; manually sorting it is; I commented this out using "#"; you can remove this
distances_sorted <- distances[ , c(1:20, 22, 21, 23, 24, 27, 25, 28, 26, 43, 29, 32, 30, 33, 31, 34, 35, 39, 36, 40, 37, 41, 38, 42, 44, 45)] #here I am sorting manually; this could be rearranged in excel as well before starting
str(distances_sorted) #look at; it looks good now
sapply(distances_sorted,max)
?max
sapply(distances_sorted,max, ignore.NA)
sapply(distances_sorted,max, na.rm = TRUE)
sapply(distances_sorted,min, na.rm = TRUE)
as.data.frame(sapply(distances_sorted,min, na.rm = TRUE))
as.data.frame(minimums = sapply(distances_sorted,min, na.rm = TRUE))
as.data.frame("minimums" = sapply(distances_sorted,min, na.rm = TRUE))
as.data.frame(sapply(distances_sorted,min, na.rm = TRUE))
as.data.frame(sapply(distances_sorted,min, na.rm = TRUE), sapply(distances_sorted,max, na.rm = TRUE))
as.data.frame(c(sapply(distances_sorted,min, na.rm = TRUE), sapply(distances_sorted,max, na.rm = TRUE))
as.data.frame(c(sapply(distances_sorted,min, na.rm = TRUE), sapply(distances_sorted,max, na.rm = TRUE)))
c(sapply(distances_sorted,min, na.rm = TRUE), sapply(distances_sorted,max, na.rm = TRUE))
cbind(sapply(distances_sorted,min, na.rm = TRUE), sapply(distances_sorted,max, na.rm = TRUE))
as.data.frame(cbind(sapply(distances_sorted,min, na.rm = TRUE), sapply(distances_sorted,max, na.rm = TRUE)))
as.data.frame(cbind(minimum = sapply(distances_sorted,min, na.rm = TRUE), sapply(distances_sorted,max, na.rm = TRUE)))
as.data.frame(cbind(minimum = sapply(distances_sorted,min, na.rm = TRUE), maximum =  sapply(distances_sorted,max, na.rm = TRUE)))
as.data.frame(cbind(minimum = sapply(distances_sorted,min, na.rm = TRUE), maximum =  sapply(distances_sorted,max, na.rm = TRUE), average = sapply(distances_sorted,mean, na.rm = TRUE)))
as.data.frame(cbind(minimum = sapply(distances_sorted,min, na.rm = TRUE), maximum =  sapply(distances_sorted,max, na.rm = TRUE), average = sapply(distances_sorted,mean, na.rm = TRUE), median = sapply(distances_sorted,median, na.rm = TRUE)))
seq(2, 44, by = 2)
asym <- distances_sorted[ , 1]
for (landmark in 1:22){
asym[, landmark + 1] <- abs(distances_sorted[, 2*landmark] - distances_sorted[, 2*landmark + 1])
}
asym <- distances_sorted[ , 1]
for (landmark in 1:22){
asym[, landmark + 1] <- abs(distances_sorted[, (2*landmark)] - distances_sorted[, (2*landmark + 1)])
}
landmark
distances_sorted[, (2*landmark)]
distances_sorted[, (2*landmark + 1)]
distances_sorted[, (2*landmark)] - distances_sorted[, (2*landmark + 1)]
abs(distances_sorted[, (2*landmark)] - distances_sorted[, (2*landmark + 1)])
asym <- distances_sorted[ , 1]
for (landmark in 1:22){
asym <- cbind(asym, abs(distances_sorted[, (2*landmark)] - distances_sorted[, (2*landmark + 1)]))
}
asym
str(asym)
asym <- distances_sorted[ , 1]
for (landmark in 1:22){
asym <- cbind(asym, as.vector(abs(distances_sorted[, (2*landmark)] - distances_sorted[, (2*landmark + 1)]))
}
as.vector(abs(distances_sorted[, (2*landmark)] - distances_sorted[, (2*landmark + 1)])
}
as.vector(abs(distances_sorted[, (2*landmark)] - distances_sorted[, (2*landmark + 1)]))
asym <- distances_sorted[ , 1]
for (landmark in 1:22){
asym <- cbind(asym, as.vector(abs(distances_sorted[, (2*landmark)] - distances_sorted[, (2*landmark + 1)])))
}
asym
str(asym)
asym <- distances_sorted[ , 1]
for (landmark in 1:22){
asym <- as.data.frame(cbind(asym, as.vector(abs(distances_sorted[, (2*landmark)] - distances_sorted[, (2*landmark + 1)]))))
}
asym
?names
asym <- distances_sorted[ , 1]
for (landmark in 1:22){
asym <- as.data.frame(cbind(asym, as.vector(abs(distances_sorted[, (2*landmark)] - distances_sorted[, (2*landmark + 1)]))))
}
names(asym) <- names(distances_sorted[ , c(1, seq(2, 44, by = 2))])
str(asym)
as.data.frame(cbind(minimum = sapply(asym, min, na.rm = TRUE), maximum =  sapply(asym, max, na.rm = TRUE), average = sapply(asym, mean, na.rm = TRUE), median = sapply(asym, median, na.rm = TRUE))) #summary statistics
asym$k_l_dist
boxplot(asym$k_l_dist)
boxplot(asym$k_l_dist)
boxplot(asym$u6_l_furc_dist)
boxplot(asym$k_l_dist)
print(asym$k_l_dist)
boxplot(asym$u6_l_furc_dist)
print(asym$u6_l_furc_dist)
boxplot(asym$k_l_dist)
print(asym$k_l_dist)
boxplot(asym$u6_l_furc_dist)
print(asym$u6_l_furc_dist)
asym$k_l_dist[22] <- NA
asym$u6_l_furc_dist[19] <- NA
boxplot(asym$k_l_dist)
print(asym$k_l_dist)
boxplot(asym$u6_l_furc_dist)
print(asym$u6_l_furc_dist)
asym$k_l_dist[22] <- NA #replacing outlier with NA
asym$u6_l_furc_dist[19] <- NA #replacing outlier with NA
library(readxl) #for reading excel
t1_minus_t2 <- read_excel("t1_minus_t2.xlsx")
numcolmax <- length(t1_minus_t2[1, ]) #original number of columns
distances <- as.data.frame(t1_minus_t2[ , c(1, seq(5, numcolmax, by = 4))]) #extracting, turning into dataframe
#str(distances) #look at; I commented this out using "#"; you can remove this
#columns were not in order (left and right were not necessarily beside each other); fixed using sort
distances <- distances[ , c(1, order(names(distances[, 2:45])) + 1)] #sorting, not including the first column
#str(distances) #look at; manually sorting it is; I commented this out using "#"; you can remove this
distances_sorted <- distances[ , c(1:20, 22, 21, 23, 24, 27, 25, 28, 26, 43, 29, 32, 30, 33, 31, 34, 35, 39, 36, 40, 37, 41, 38, 42, 44, 45)] #here I am sorting manually; this could be rearranged in excel as well before starting
str(distances_sorted) #look at; it looks good now
asym <- distances_sorted[ , 1]
for (landmark in 1:22){
asym <- as.data.frame(cbind(asym, as.vector(abs(distances_sorted[, (2*landmark)] - distances_sorted[, (2*landmark + 1)]))))
}
names(asym) <- names(distances_sorted[ , c(1, seq(2, 44, by = 2))])
str(asym)
library(readxl) #for reading excel
t1_minus_t2 <- read_excel("t1_minus_t2.xlsx")
numcolmax <- length(t1_minus_t2[1, ]) #original number of columns
distances <- as.data.frame(t1_minus_t2[ , c(1, seq(5, numcolmax, by = 4))]) #extracting, turning into dataframe
#str(distances) #look at; I commented this out using "#"; you can remove this
#columns were not in order (left and right were not necessarily beside each other); fixed using sort
distances <- distances[ , c(1, order(names(distances[, 2:45])) + 1)] #sorting, not including the first column
#str(distances) #look at; manually sorting it is; I commented this out using "#"; you can remove this
distances_sorted <- distances[ , c(1:20, 22, 21, 23, 24, 27, 25, 28, 26, 43, 29, 32, 30, 33, 31, 34, 35, 39, 36, 40, 37, 41, 38, 42, 44, 45)] #here I am sorting manually; this could be rearranged in excel as well before starting
str(distances_sorted) #look at; it looks good now
numcolmax <- length(t1_minus_t2[1, ]) #original number of columns
distances <- as.data.frame(t1_minus_t2[ , c(1, seq(5, numcolmax, by = 4))]) #extracting, turning into dataframe
#str(distances) #look at; I commented this out using "#"; you can remove this
#columns were not in order (left and right were not necessarily beside each other); fixed using sort
distances <- distances[ , c(1, order(names(distances[, 2:45])) + 1)] #sorting, not including the first column
#str(distances) #look at; manually sorting it is; I commented this out using "#"; you can remove this
distances_sorted <- distances[ , c(1:20, 22, 21, 23, 24, 27, 25, 28, 26, 43, 29, 32, 30, 33, 31, 34, 35, 39, 36, 40, 37, 41, 38, 42, 44, 45)] #here I am sorting manually; this could be rearranged in excel as well before starting
str(distances_sorted) #look at; it looks good now
as.data.frame(cbind(minimum = sapply(distances_sorted,min, na.rm = TRUE), maximum =  sapply(distances_sorted,max, na.rm = TRUE), average = sapply(distances_sorted,mean, na.rm = TRUE), median = sapply(distances_sorted,median, na.rm = TRUE))) #summary statistics
landmark <- 1
distances_sorted[, (2*landmark)]
asym <- distances_sorted[ , 1]
for (landmark in 1:22){
asym <- as.data.frame(cbind(asym, as.vector(abs(distances_sorted[, (2*landmark)] - distances_sorted[, (2*landmark + 1)]))))
}
names(asym) <- names(distances_sorted[ , c(1, seq(2, 44, by = 2))])
str(asym)
library(readxl) #for reading excel
t1_minus_t2 <- read_excel("t1_minus_t2.xlsx")
numcolmax <- length(t1_minus_t2[1, ]) #original number of columns
distances <- as.data.frame(t1_minus_t2[ , c(1, seq(5, numcolmax, by = 4))]) #extracting, turning into dataframe
#str(distances) #look at; I commented this out using "#"; you can remove this
#columns were not in order (left and right were not necessarily beside each other); fixed using sort
distances <- distances[ , c(1, order(names(distances[, 2:45])) + 1)] #sorting, not including the first column
#str(distances) #look at; manually sorting it is; I commented this out using "#"; you can remove this
distances_sorted <- distances[ , c(1:20, 22, 21, 23, 24, 27, 25, 28, 26, 43, 29, 32, 30, 33, 31, 34, 35, 39, 36, 40, 37, 41, 38, 42, 44, 45)] #here I am sorting manually; this could be rearranged in excel as well before starting
str(distances_sorted) #look at; it looks good now
numcolmax <- length(t1_minus_t2[1, ]) #original number of columns
distances <- as.data.frame(t1_minus_t2[ , c(1, seq(5, numcolmax, by = 4))]) #extracting, turning into dataframe
#str(distances) #look at; I commented this out using "#"; you can remove this
#columns were not in order (left and right were not necessarily beside each other); fixed using sort
distances <- distances[ , c(1, order(names(distances[, 2:45])) + 1)] #sorting, not including the first column
#str(distances) #look at; manually sorting it is; I commented this out using "#"; you can remove this
#distances_sorted <- distances[ , c(1:20, 22, 21, 23, 24, 27, 25, 28, 26, 43, 29, 32, 30, 33, 31, 34, 35, 39, 36, 40, 37, 41, 38, 42, 44, 45)] #here I am sorting manually; this could be rearranged in excel as well before starting
#str(distances_sorted) #look at; it looks good now
library(readxl) #for reading excel
t1_minus_t2 <- read_excel("t1_minus_t2.xlsx")
#This extracts the euclidean distances along with the patient identifiers.
numcolmax <- length(t1_minus_t2[1, ]) #original number of columns
distances <- as.data.frame(t1_minus_t2[ , c(1, seq(5, numcolmax, by = 4))]) #extracting, turning into dataframe
#str(distances) #look at; I commented this out using "#"; you can remove this
#columns were not in order (left and right were not necessarily beside each other); fixed using sort
distances <- distances[ , c(1, order(names(distances[, 2:45])) + 1)] #sorting, not including the first column
#str(distances) #look at; manually sorting it is; I commented this out using "#"; you can remove this
distances_sorted <- distances[ , c(1:20, 22, 21, 23, 24, 27, 25, 28, 26, 43, 29, 32, 30, 33, 31, 34, 35, 39, 36, 40, 37, 41, 38, 42, 44, 45)] #here I am sorting manually; this could be rearranged in excel as well before starting
str(distances_sorted) #look at; it looks good now
t1_minus_t2 <- read_excel("t1_minus_t2.xlsx")
#This extracts the euclidean distances along with the patient identifiers.
numcolmax <- length(t1_minus_t2[1, ]) #original number of columns
distances <- as.data.frame(t1_minus_t2[ , c(1, seq(5, numcolmax, by = 4))]) #extracting, turning into dataframe
#str(distances) #look at; I commented this out using "#"; you can remove this
#columns were not in order (left and right were not necessarily beside each other); fixed using sort
distances <- distances[ , c(1, order(names(distances[, 2:45])) + 1)] #sorting, not including the first column
str(distances) #look at; manually sorting it is; I commented this out using "#"; you can remove this
#distances_sorted <- distances[ , c(1:20, 22, 21, 23, 24, 27, 25, 28, 26, 43, 29, 32, 30, 33, 31, 34, 35, 39, 36, 40, 37, 41, 38, 42, 44, 45)] #here I am sorting manually; this could be rearranged in excel as well before starting
#str(distances_sorted) #look at; it looks good now
t1_minus_t2 <- read_excel("t1_minus_t2.xlsx")
#This extracts the euclidean distances along with the patient identifiers.
numcolmax <- length(t1_minus_t2[1, ]) #original number of columns
distances <- as.data.frame(t1_minus_t2[ , c(1, seq(5, numcolmax, by = 4))]) #extracting, turning into dataframe
#str(distances) #look at; I commented this out using "#"; you can remove this
#columns were not in order (left and right were not necessarily beside each other); fixed using sort
distances <- distances[ , c(1, order(names(distances[, 2:45])) + 1)] #sorting, not including the first column
str(distances) #look at; manually sorting it is; I commented this out using "#"; you can remove this
distances_sorted <- distances[ , c(1:20, 22, 21, 23, 24, 27, 25, 28, 26, 29, 32, 30, 33, 31, 34, 35, 39, 36, 40, 37, 41, 38, 42, 43, 44, 45)] #here I am sorting manually; this could be rearranged in excel as well before starting
#str(distances_sorted) #look at; it looks good now
t1_minus_t2 <- read_excel("t1_minus_t2.xlsx")
#This extracts the euclidean distances along with the patient identifiers.
numcolmax <- length(t1_minus_t2[1, ]) #original number of columns
distances <- as.data.frame(t1_minus_t2[ , c(1, seq(5, numcolmax, by = 4))]) #extracting, turning into dataframe
#str(distances) #look at; I commented this out using "#"; you can remove this
#columns were not in order (left and right were not necessarily beside each other); fixed using sort
distances <- distances[ , c(1, order(names(distances[, 2:45])) + 1)] #sorting, not including the first column
str(distances) #look at; manually sorting it is; I commented this out using "#"; you can remove this
distances_sorted <- distances[ , c(1:20, 22, 21, 23, 24, 27, 25, 28, 26, 29, 32, 30, 33, 31, 34, 35, 39, 36, 40, 37, 41, 38, 42, 43, 44, 45)] #here I am sorting manually; this could be rearranged in excel as well before starting
str(distances_sorted) #look at; it looks good now
t1_minus_t2 <- read_excel("t1_minus_t2.xlsx")
#This extracts the euclidean distances along with the patient identifiers.
numcolmax <- length(t1_minus_t2[1, ]) #original number of columns
distances <- as.data.frame(t1_minus_t2[ , c(1, seq(5, numcolmax, by = 4))]) #extracting, turning into dataframe
#str(distances) #look at; I commented this out using "#"; you can remove this
#columns were not in order (left and right were not necessarily beside each other); fixed using sort
distances <- distances[ , c(1, order(names(distances[, 2:45])) + 1)] #sorting, not including the first column
str(distances) #look at; manually sorting it is; I commented this out using "#"; you can remove this
distances_sorted <- distances[ , c(1:20, 22, 21, 23, 24, 27, 25, 28, 26, 29, 32, 33, 36, 30, 31, 34, 35, 39, 37, 41, 38, 42, 40, 43, 44, 45)] #here I am sorting manually; this could be rearranged in excel as well before starting
str(distances_sorted) #look at; it looks good now
t1_minus_t2 <- read_excel("t1_minus_t2.xlsx")
#This extracts the euclidean distances along with the patient identifiers.
numcolmax <- length(t1_minus_t2[1, ]) #original number of columns
distances <- as.data.frame(t1_minus_t2[ , c(1, seq(5, numcolmax, by = 4))]) #extracting, turning into dataframe
#str(distances) #look at; I commented this out using "#"; you can remove this
#columns were not in order (left and right were not necessarily beside each other); fixed using sort
distances <- distances[ , c(1, order(names(distances[, 2:45])) + 1)] #sorting, not including the first column
str(distances) #look at; manually sorting it is; I commented this out using "#"; you can remove this
distances_sorted <- distances[ , c(1:20, 22, 21, 23, 24, 27, 25, 28, 26, 29, 32, 30, 33, 31, 34, 35, 39, 36, 40, 37, 41, 38, 42, 43, 44, 45)] #here I am sorting manually; this could be rearranged in excel as well before starting
str(distances_sorted) #look at; it looks good now
t1_minus_t2 <- read_excel("t1_minus_t2.xlsx")
#This extracts the euclidean distances along with the patient identifiers.
numcolmax <- length(t1_minus_t2[1, ]) #original number of columns
distances <- as.data.frame(t1_minus_t2[ , c(1, seq(5, numcolmax, by = 4))]) #extracting, turning into dataframe
#str(distances) #look at; I commented this out using "#"; you can remove this
#columns were not in order (left and right were not necessarily beside each other); fixed using sort
distances <- distances[ , c(1, order(names(distances[, 2:45])) + 1)] #sorting, not including the first column
str(distances) #look at; manually sorting it is; I commented this out using "#"; you can remove this
distances_sorted <- distances[ , c(1:20, 22, 21, 23, 24, 27, 25, 28, 26, 29, 32, 35, 30, 33, 31, 34, 36, 40, 37, 41, 38, 42, 39, 43, 44, 45)] #here I am sorting manually; this could be rearranged in excel as well before starting
str(distances_sorted) #look at; it looks good now
library(readxl) #for reading excel
t1_minus_t2 <- read_excel("t1_minus_t2.xlsx")
numcolmax <- length(t1_minus_t2[1, ]) #original number of columns
distances <- as.data.frame(t1_minus_t2[ , c(1, seq(5, numcolmax, by = 4))]) #extracting, turning into dataframe
#str(distances) #look at; I commented this out using "#"; you can remove this
#columns were not in order (left and right were not necessarily beside each other); fixed using sort
distances <- distances[ , c(1, order(names(distances[, 2:45])) + 1)] #sorting, not including the first column
#str(distances) #look at; manually sorting it is; I commented this out using "#"; you can remove this
distances_sorted <- distances[ , c(1:20, 22, 21, 23, 24, 27, 25, 28, 26, 29, 32, 35, 30, 33, 31, 34, 36, 40, 37, 41, 38, 42, 39, 43, 44, 45)]  #here I am sorting manually; this could be rearranged in excel as well before starting
str(distances_sorted) #look at; it looks good now
as.data.frame(cbind(minimum = sapply(distances_sorted,min, na.rm = TRUE), maximum =  sapply(distances_sorted,max, na.rm = TRUE), average = sapply(distances_sorted,mean, na.rm = TRUE), median = sapply(distances_sorted,median, na.rm = TRUE))) #summary statistics
asym <- distances_sorted[ , 1]
for (landmark in 1:22){
asym <- as.data.frame(cbind(asym, as.vector(abs(distances_sorted[, (2*landmark)] - distances_sorted[, (2*landmark + 1)]))))
}
names(asym) <- names(distances_sorted[ , c(1, seq(2, 44, by = 2))])
as.data.frame(cbind(minimum = sapply(asym, min, na.rm = TRUE), maximum =  sapply(asym, max, na.rm = TRUE), average = sapply(asym, mean, na.rm = TRUE), median = sapply(asym, median, na.rm = TRUE))) #summary statistics
boxplot(asym$k_l_dist)
print(asym$k_l_dist)
boxplot(asym$u6_l_furc_dist)
print(asym$u6_l_furc_dist)
asym$k_l_dist[22] <- NA #replacing exteme outlier with NA
asym$u6_l_furc_dist[19] <- NA #replacing extreme outlier with NA
as.data.frame(cbind(minimum = sapply(distances_sorted,min, na.rm = TRUE), maximum =  sapply(distances_sorted,max, na.rm = TRUE), average = sapply(distances_sorted,mean, na.rm = TRUE), median = sapply(distances_sorted,median, na.rm = TRUE))) #summary statistics
boxplot(asym$k_l_dist)
print(asym$k_l_dist)
boxplot(asym$u6_l_furc_dist)
print(asym$u6_l_furc_dist)
asym$k_l_dist[22] <- NA #replacing exteme outlier with NA
asym$u6_l_furc_dist[19] <- NA #replacing extreme outlier with NA
as.data.frame(cbind(minimum = sapply(distances_sorted,min, na.rm = TRUE), maximum =  sapply(distances_sorted,max, na.rm = TRUE), average = sapply(distances_sorted,mean, na.rm = TRUE), median = sapply(distances_sorted,median, na.rm = TRUE))) #summary statistics
t1_minus_t2 <- read_excel("t1_minus_t2.xlsx")
numcolmax <- length(t1_minus_t2[1, ]) #original number of columns
distances <- as.data.frame(t1_minus_t2[ , c(1, seq(5, numcolmax, by = 4))]) #extracting, turning into dataframe
#str(distances) #look at; I commented this out using "#"; you can remove this
#columns were not in order (left and right were not necessarily beside each other); fixed using sort
distances <- distances[ , c(1, order(names(distances[, 2:45])) + 1)] #sorting, not including the first column
#str(distances) #look at; manually sorting it is; I commented this out using "#"; you can remove this
distances_sorted <- distances[ , c(1:20, 22, 21, 23, 24, 27, 25, 28, 26, 29, 32, 35, 30, 33, 31, 34, 36, 40, 37, 41, 38, 42, 39, 43, 44, 45)]  #here I am sorting manually; this could be rearranged in excel as well before starting
str(distances_sorted) #look at; it looks good now
as.data.frame(cbind(minimum = sapply(distances_sorted,min, na.rm = TRUE), maximum =  sapply(distances_sorted,max, na.rm = TRUE), average = sapply(distances_sorted,mean, na.rm = TRUE), median = sapply(distances_sorted,median, na.rm = TRUE))) #summary statistics
asym <- distances_sorted[ , 1]
for (landmark in 1:22){
asym <- as.data.frame(cbind(asym, as.vector(abs(distances_sorted[, (2*landmark)] - distances_sorted[, (2*landmark + 1)]))))
}
names(asym) <- names(distances_sorted[ , c(1, seq(2, 44, by = 2))])
as.data.frame(cbind(minimum = sapply(asym, min, na.rm = TRUE), maximum =  sapply(asym, max, na.rm = TRUE), average = sapply(asym, mean, na.rm = TRUE), median = sapply(asym, median, na.rm = TRUE))) #summary statistics
boxplot(asym$k_r_dist)
boxplot(asym$k_l_dist)
print(asym$k_l_dist)
boxplot(asym$u6_l_furc_dist)
print(asym$u6_l_furc_dist)
asym$k_r_dist[22] <- NA #replacing extreme outlier with NA
boxplot(asym$k_l_dist)
print(asym$k_l_dist)
boxplot(asym$u6_l_furc_dist)
print(asym$u6_l_furc_dist)
distances_sorted$k_r_dist[22] <- NA #replacing extreme outlier with NA
distances_sorted$k_l_dist[22] <- NA #paired observation
distances_sorted$u6_l_furc_dist[19] <- NA #replacing extreme outlier with NA
distances_sorted$u6_r_furc_dist[19] <- NA #paired observation
asym <- distances_sorted[ , 1]
for (landmark in 1:22){
asym <- as.data.frame(cbind(asym, as.vector(abs(distances_sorted[, (2*landmark)] - distances_sorted[, (2*landmark + 1)]))))
}
names(asym) <- names(distances_sorted[ , c(1, seq(2, 44, by = 2))])
as.data.frame(cbind(minimum = sapply(asym, min, na.rm = TRUE), maximum =  sapply(asym, max, na.rm = TRUE), average = sapply(asym, mean, na.rm = TRUE), median = sapply(asym, median, na.rm = TRUE))) #summary statistics
as.data.frame(cbind(minimum = sapply(distances_sorted,min, na.rm = TRUE), maximum =  sapply(distances_sorted,max, na.rm = TRUE), average = sapply(distances_sorted,mean, na.rm = TRUE), median = sapply(distances_sorted,median, na.rm = TRUE))) #summary statistics
t1_minus_t2 <- read_excel("t1_minus_t2.xlsx")
#This extracts the euclidean distances along with the patient identifiers.
numcolmax <- length(t1_minus_t2[1, ]) #original number of columns
distances <- as.data.frame(t1_minus_t2[ , c(1, seq(5, numcolmax, by = 4))]) #extracting, turning into dataframe
#str(distances) #look at; I commented this out using "#"; you can remove this
#columns were not in order (left and right were not necessarily beside each other); fixed using sort
distances <- distances[ , c(1, order(names(distances[, 2:45])) + 1)] #sorting, not including the first column
str(distances) #look at; manually sorting it is; I commented this out using "#"; you can remove this
distances_sorted <- distances[ , c(1:20, 22, 21, 23, 24, 27, 25, 28, 26, 29, 32, 35, 30, 33, 31, 34, 36, 40, 37, 41, 38, 42, 39, 43, 44, 45)] #here I am sorting manually; this could be rearranged in excel as well before starting
str(distances_sorted) #look at; it looks good now
t1_minus_t2 <- read_excel("t1_minus_t2.xlsx")
#This extracts the euclidean distances along with the patient identifiers.
numcolmax <- length(t1_minus_t2[1, ]) #original number of columns
distances <- as.data.frame(t1_minus_t2[ , c(1, seq(5, numcolmax, by = 4))]) #extracting, turning into dataframe
#str(distances) #look at; I commented this out using "#"; you can remove this
#Now I clean the data
#columns were not in order (left and right were not necessarily beside each other); fixed using sort
distances <- distances[ , c(1, order(names(distances[, 2:45])) + 1)] #sorting, not including the first column
#str(distances) #look at; manually sorting it is; I commented this out using "#"; you can remove this
distances_sorted <- distances[ , c(1:20, 22, 21, 23, 24, 27, 25, 28, 26, 29, 32, 35, 30, 33, 31, 34, 36, 40, 37, 41, 38, 42, 39, 43, 44, 45)] #here I am sorting manually; this could be rearranged in excel as well before starting
#str(distances_sorted) #look at; it looks good now
distances_sorted$k_r_dist[22] <- NA #replacing extreme outlier with NA
distances_sorted$k_l_dist[22] <- NA #paired observation
distances_sorted$u6_l_furc_dist[19] <- NA #replacing extreme outlier with NA
distances_sorted$u6_r_furc_dist[19] <- NA #paired observation
#Dataframe for asymmetries, named after the left landmark
asym <- distances_sorted[ , 1]
for (landmark in 1:22){
asym <- as.data.frame(cbind(asym, as.vector(abs(distances_sorted[, (2*landmark)] - distances_sorted[, (2*landmark + 1)]))))
}
names(asym) <- names(distances_sorted[ , c(1, seq(2, 44, by = 2))])
for (landmark_plot in 1:44){
plot(distances_sorted[ , 2*landmark_plot], distances_sorted[ , 2*landmark_plot + 1])
}
for (landmark_plot in 1:22){
plot(distances_sorted[ , 2*landmark_plot], distances_sorted[ , 2*landmark_plot + 1])
}
for (landmark_plot in 1:22){
plot(distances_sorted[ , 2*landmark_plot], distances_sorted[ , 2*landmark_plot + 1])
abline(a = 1, b = 0)
}
for (landmark_plot in 1:22){
plot(distances_sorted[ , 2*landmark_plot], distances_sorted[ , 2*landmark_plot + 1])
abline(a = 0, b = 1)
}
for (landmark_plot in 1:22){
plot(distances_sorted[ , 2*landmark_plot], distances_sorted[ , 2*landmark_plot + 1], ylim = 6, xlim = 6)
abline(a = 0, b = 1)
}
for (landmark_plot in 1:22){
plot(distances_sorted[ , 2*landmark_plot], distances_sorted[ , 2*landmark_plot + 1], ylim = c(0,6), xlim = c(0,6))
abline(a = 0, b = 1)
}
?abline
for (landmark_plot in 1:22){
plot(distances_sorted[ , 2*landmark_plot], distances_sorted[ , 2*landmark_plot + 1], ylim = c(0,6), xlim = c(0,6))
abline(a = 0, b = 1, lty = 2)
}
?crx
?csx
for (landmark_plot in 1:22){
plot(distances_sorted[ , 2*landmark_plot], distances_sorted[ , 2*landmark_plot + 1], ylim = c(0,6), xlim = c(0,6))
abline(a = 0, b = 1, lty = 2)
}
for (landmark_plot in 1:22){
plot(distances_sorted[ , 2*landmark_plot], distances_sorted[ , 2*landmark_plot + 1], ylim = c(0,6), xlim = c(0,6))
abline(a = 0, b = 1, lty = 2, col = "green")
}
for (landmark_plot in 1:22){
plot(distances_sorted[ , 2*landmark_plot], distances_sorted[ , 2*landmark_plot + 1], ylim = c(0,6), xlim = c(0,6))
abline(a = 0, b = 1, lty = 2, col = "green")
abline(a = 1, b = 1, lty = 2, col = "orange")
abline(a = 2, b = 1, lty = 2, col = "red")
}
for (landmark_plot in 1:22){
plot(distances_sorted[ , 2*landmark_plot], distances_sorted[ , 2*landmark_plot + 1], ylim = c(0,6), xlim = c(0,6))
abline(a = 0, b = 1, lty = 2, col = "green")
abline(a = 1, b = 1, lty = 2, col = "orange")
abline(a = 2, b = 1, lty = 2, col = "red")
abline(a = -1, b = 1, lty = 2, col = "orange")
abline(a = -2, b = 1, lty = 2, col = "red")
}
for (landmark_plot in 1:22){
plot(distances_sorted[ , 2*landmark_plot], distances_sorted[ , 2*landmark_plot + 1], ylim = c(0,6), xlim = c(0,6), ylab = "Right Landmark", xlab = "Left Landmark", main = names(asym)[landmark + 1])
abline(a = 0, b = 1, lty = 2, col = "green")
abline(a = 1, b = 1, lty = 2, col = "orange")
abline(a = 2, b = 1, lty = 2, col = "red")
abline(a = -1, b = 1, lty = 2, col = "orange")
abline(a = -2, b = 1, lty = 2, col = "red")
}
names(asym)
for (landmark_plot in 1:22){
plot(distances_sorted[ , 2*landmark_plot], distances_sorted[ , 2*landmark_plot + 1], ylim = c(0,6), xlim = c(0,6), ylab = "Right Landmark", xlab = "Left Landmark", main = names(asym)[landmark_plot + 1])
abline(a = 0, b = 1, lty = 2, col = "green")
abline(a = 1, b = 1, lty = 2, col = "orange")
abline(a = 2, b = 1, lty = 2, col = "red")
abline(a = -1, b = 1, lty = 2, col = "orange")
abline(a = -2, b = 1, lty = 2, col = "red")
}
for (landmark_plot in 1:22){
plot(distances_sorted[ , 2*landmark_plot], distances_sorted[ , 2*landmark_plot + 1], ylim = c(0,6), xlim = c(0,6), ylab = "Right Landmark", xlab = "Left Landmark", main = names(asym)[landmark_plot + 1], bg="black")
abline(a = 0, b = 1, lty = 2, col = "green")
abline(a = 1, b = 1, lty = 2, col = "orange")
abline(a = 2, b = 1, lty = 2, col = "red")
abline(a = -1, b = 1, lty = 2, col = "orange")
abline(a = -2, b = 1, lty = 2, col = "red")
}
for (landmark_plot in 1:22){
plot(distances_sorted[ , 2*landmark_plot], distances_sorted[ , 2*landmark_plot + 1], ylim = c(0,6), xlim = c(0,6), ylab = "Right Landmark", xlab = "Left Landmark", main = names(asym)[landmark_plot + 1], pch = 16)
abline(a = 0, b = 1, lty = 2, col = "green")
abline(a = 1, b = 1, lty = 2, col = "orange")
abline(a = 2, b = 1, lty = 2, col = "red")
abline(a = -1, b = 1, lty = 2, col = "orange")
abline(a = -2, b = 1, lty = 2, col = "red")
}
for (landmark_plot in 1:22){
plot(distances_sorted[ , 2*landmark_plot], distances_sorted[ , 2*landmark_plot + 1], ylim = c(0,6), xlim = c(0,6), ylab = "Right Landmark", xlab = "Left Landmark", main = names(asym)[landmark_plot + 1], pch = 20)
abline(a = 0, b = 1, lty = 2, col = "green")
abline(a = 1, b = 1, lty = 2, col = "orange")
abline(a = 2, b = 1, lty = 2, col = "red")
abline(a = -1, b = 1, lty = 2, col = "orange")
abline(a = -2, b = 1, lty = 2, col = "red")
}
for (landmark_plot in 1:22){
plot(distances_sorted[ , 2*landmark_plot], distances_sorted[ , 2*landmark_plot + 1], ylim = c(0,6), xlim = c(0,6), ylab = "Right Landmark", xlab = "Left Landmark", main = names(asym)[landmark_plot + 1], pch = 16)
abline(a = 0, b = 1, lty = 2, col = "green")
abline(a = 1, b = 1, lty = 2, col = "orange")
abline(a = 2, b = 1, lty = 2, col = "red")
abline(a = -1, b = 1, lty = 2, col = "orange")
abline(a = -2, b = 1, lty = 2, col = "red")
}
for (landmark_plot in 1:22){
plot(distances_sorted[ , 2*landmark_plot], distances_sorted[ , 2*landmark_plot + 1], ylim = c(0,6), xlim = c(0,6), ylab = "Right Landmark", xlab = "Left Landmark", main = names(asym)[landmark_plot + 1], pch = 16, cex = .8)
abline(a = 0, b = 1, lty = 2, col = "green")
abline(a = 1, b = 1, lty = 2, col = "orange")
abline(a = 2, b = 1, lty = 2, col = "red")
abline(a = -1, b = 1, lty = 2, col = "orange")
abline(a = -2, b = 1, lty = 2, col = "red")
}
for (landmark_plot in 1:22){
plot(distances_sorted[ , 2*landmark_plot], distances_sorted[ , 2*landmark_plot + 1], ylim = c(0,6), xlim = c(0,6), ylab = "Right Landmark", xlab = "Left Landmark", main = names(asym)[landmark_plot + 1], pch = 16, cex = .9)
abline(a = 0, b = 1, lty = 2, col = "green")
abline(a = 1, b = 1, lty = 2, col = "orange")
abline(a = 2, b = 1, lty = 2, col = "red")
abline(a = -1, b = 1, lty = 2, col = "orange")
abline(a = -2, b = 1, lty = 2, col = "red")
}
for (landmark_plot in 1:22){
plot(distances_sorted[ , 2*landmark_plot], distances_sorted[ , 2*landmark_plot + 1], #plots points
ylim = c(0,6), xlim = c(0,6), #axis
ylab = "Right Landmark", xlab = "Left Landmark", main = names(asym)[landmark_plot + 1], #labels
pch = 16, cex = .9) #point shape and size
abline(a = 0, b = 1, lty = 2, col = "green")
abline(a = 1, b = 1, lty = 2, col = "orange")
abline(a = 2, b = 1, lty = 2, col = "red")
abline(a = -1, b = 1, lty = 2, col = "orange")
abline(a = -2, b = 1, lty = 2, col = "red")
}
?ttest
?t.test
for(landmark in 1:22){
t.test(asym[ , landmark + 1], alternative = "greater"
mu = 1) #This '1' is the value that you may want to change depending on what you would like to test
for(landmark in 1:22){
t.test(asym[ , landmark + 1], alternative = "greater",
mu = 1) #This '1' is the value that you may want to change depending on what you would like to test
}
for(landmark in 1:22){
t.test(asym[ , landmark + 1], alternative = "greater",
mu = 1)$p.value #This '1' is the value that you may want to change depending on what you would like to test
}
landmark <- 1
t.test(asym[ , landmark + 1], alternative = "greater",
mu = 1)
t.test(asym[ , landmark + 1], alternative = "greater",
mu = 1)$p.value
for(landmark in 1:22){
print(t.test(asym[ , landmark + 1], alternative = "greater",
mu = 1)$p.value) #This '1' is the value that you may want to change depending on what you would like to test
}
names(asym)[43]
names(asym)[21]
